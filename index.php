<?php

define('session_save_path', dirname(realpath(__FILE__)) . DIRECTORY_SEPARATOR . 'sessions');


class MyAppSessionHandler extends SessionHandler {

    // session params
    private $cookie_name = 'MyAPPSess';
    private $cookie_lifetime = 0;
    private $cookie_path = '/' ;
    private $cookie_domain = '.phpsite.com';
    private $cookie_secure = false;
    private $cookie_httponly= true;


    //sessions files path
    private $session_save_path = session_save_path;

    // session data cryptography params

    private $cipher = "AES-128-CBC";
    private $key = 'WycryptoAKA@2021';


    // timer to generate a new session
     private $timer = 1;

    public function __construct()
    {

        //session configurations in php.ini file

        ini_set('session.use_cookies',1);
        ini_set('session.use_only_cookies',1);
        ini_set('session.use_trans_sid',0);
        ini_set('session.save_handler','files');

        session_save_path($this->session_save_path);
        session_name($this->cookie_name);
        session_set_cookie_params($this->cookie_lifetime,
            $this->cookie_path,
            $this->cookie_domain,
            $this->cookie_secure,
            $this->cookie_httponly);

        session_set_save_handler($this,true);
    }



    public function __set(string $name, $value): void
    {
        // TODO: Implement __set() method.
        $_SESSION[$name]=$value;
    }

    public function __get(string $name): bool|string
    {
        // TODO: Implement __get() method.
        return isset($_SESSION[$name]) ? $_SESSION[$name] : false ;
    }

    public function __isset(string $name): bool
    {
        // TODO: Implement __isset() method.
        return isset($_SESSION[$name]) ? true : false;
    }

    public function write($id, $data): bool
    {

//        $key = hash('sha256', $this->key, true);
//        $iv = openssl_random_pseudo_bytes(16);
//
//        $ciphertext = openssl_encrypt($data, $this->cipher, $key, OPENSSL_RAW_DATA, $iv);
//        $hash = hash_hmac('sha256', $ciphertext . $iv, $key, true);
//
//       return parent::write($id,$ciphertext);


        return parent::write($id,$data);
    }

    public function read($id): bool|string
    {
//        $ivHashCiphertext = parent::read($id); // TODO: Change the autogenerated stub;
//        $iv = substr($ivHashCiphertext, 0, 16);
//        $hash = substr($ivHashCiphertext, 16, 32);
//        $ciphertext = substr($ivHashCiphertext, 48);
//        $key = hash('sha256',  $this->key, true);
//
//
//
//        return openssl_decrypt($ciphertext, $this->cipher, $key, OPENSSL_RAW_DATA, $iv);


        return parent::read($id);
    }

    public function start()
    {
          if( '' === session_id() ){
              if(session_start()){

                  if(!isset($this->sessionStartTime)){
                      $this->sessionStartTime = time();
                  }

                  if ( ( ( time() - ((int)$this->sessionStartTime) ) >= ($this->timer * 60) ) ) {
                      session_regenerate_id(true);
                  }

              }
          }

    }






}

$sess= new MyAppSessionHandler();
$sess->start();

$sess->name = 'mohamed';
var_dump( time() -   (int)$sess->sessionStartTime  );