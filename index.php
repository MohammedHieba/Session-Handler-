<?php

define('session_save_path', dirname(realpath(__FILE__)) . DIRECTORY_SEPARATOR . 'sessions');


class MyAppSessionHandler extends SessionHandler {

    // session params
    private $cookie_name = 'MyAPPSess';
    private $cookie_lifetime = 0;
    private $cookie_path = '/' ;
    private $cookie_domain = '.phpsite.com';
    private $cookie_secure = false;
    private $cookie_httponly= true;


    //sessions files path
    private $session_save_path = session_save_path;

    // session data cryptography params

    private $cipher = "AES-128-CBC";
    private $key = 'WycryptoAKA@2021';


    // timer to generate a new session
     private $timer = 1;

    public function __construct()
    {

        //session configurations in php.ini file

        ini_set('session.use_cookies',1);
        ini_set('session.use_only_cookies',1);
        ini_set('session.use_trans_sid',0);
        ini_set('session.save_handler','files');

        session_save_path($this->session_save_path);
        session_name($this->cookie_name);
        session_set_cookie_params($this->cookie_lifetime,
            $this->cookie_path,
            $this->cookie_domain,
            $this->cookie_secure,
            $this->cookie_httponly);

        session_set_save_handler($this,true);
    }



    public function __set(string $name, $value): void
    {
        // TODO: Implement __set() method.
        $_SESSION[$name]=$value;
    }

    public function __get(string $name): bool|string
    {
        // TODO: Implement __get() method.
        return isset($_SESSION[$name]) ? $_SESSION[$name] : false ;
    }

    public function __isset(string $name): bool
    {
        // TODO: Implement __isset() method.
        return isset($_SESSION[$name]) ? true : false;
    }

    public function write($id, $data): bool
    {
        $plaintext = $data;
        $ivlen = openssl_cipher_iv_length($this->cipher);
        $iv = openssl_random_pseudo_bytes($ivlen);
        $ciphertext_raw = openssl_encrypt($plaintext, $this->cipher, $this->key, $options=OPENSSL_RAW_DATA, $iv);
        $hmac = hash_hmac('sha256', $ciphertext_raw, $this->key, $as_binary=true);
        $ciphertext = base64_encode( $iv.$hmac.$ciphertext_raw );
        return parent::write($id,$ciphertext);
    }

    public function read($id): string
    {
        $ciphertext = parent::read($id); // TODO: Change the autogenerated stub;
        $c = base64_decode($ciphertext);
        $ivlen = openssl_cipher_iv_length($this->cipher);
        $iv = substr($c, 0, $ivlen);
        $hmac = substr($c, $ivlen, $sha2len=32);
        $ciphertext_raw = substr($c, $ivlen+$sha2len);
        $original_plaintext = openssl_decrypt($ciphertext_raw, $this->cipher, $this->key, $options=OPENSSL_RAW_DATA, $iv);
        $calcmac = hash_hmac('sha256', $ciphertext_raw, $this->key, $as_binary=true);
        if (hash_equals($hmac, $calcmac))// timing attack safe comparison
        {
            return $original_plaintext;
        }
        return $original_plaintext;



    }

    public function start()
    {
          if( '' === session_id() ){
              if(session_start()){

                  if(!isset($this->sessionStartTime)){
                      $this->sessionStartTime = time();
                  }

                  if ( ( ( time() - ((int)$this->sessionStartTime) ) >= ($this->timer * 60) ) ) {
                      $this->sessionStartTime = time();
                      session_regenerate_id(true);
                      $this->generateFingerPrint();

                  }

              }
          }

    }

    //kill session function

    public function kill(){

        setcookie($this->cookie_name ,
            "",
            time()-1000 ,
            $this->cookie_path,
            $this->cookie_domain,
            $this->cookie_secure,
            $this->cookie_httponly); //delete cookie session

        session_unset(); // empty session
        session_destroy(); // remove session itself

    }

    //generate fingerprint function

    private function generateFingerPrint(): bool
    {

        if(!isset( $this->fingerPrint)){
            $user_agent_content = $_SERVER['HTTP_USER_AGENT'];
            $ivlen = openssl_cipher_iv_length($this->cipher);
            $this->cipherKey = openssl_random_pseudo_bytes($ivlen);
            $session_id =session_id();
            $this->fingerPrint = base64_encode($user_agent_content.$this->cipherKey.$session_id);
            return  true;
        }
        return false;

    }

    //isValid fingerPrint function
    public function isValidFingerPrint(): bool
    {
        $this->generateFingerPrint();
        $fingerPrint = base64_encode($_SERVER['HTTP_USER_AGENT'].$this->cipherKey.session_id());
        if( $this->fingerPrint === $fingerPrint ){
            return true;
        }
        return false;


    }





}

$session= new MyAppSessionHandler();
$session->start();
var_dump($session->isValidFingerPrint() );

//$session->kill();

//var_dump($_SESSION);
